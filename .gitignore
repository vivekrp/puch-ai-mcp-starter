# =================================================================
# MCP Starter - Comprehensive .gitignore
# Covers: Python, TypeScript, JavaScript, Node.js, Cloudflare Workers
# =================================================================

# =======================
# Environment Variables
# =======================
.env
.env.local
.env.*.local
.env.production
.env.development
.env.test
.dev.vars
*.env

# =======================
# Python
# =======================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv/
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.
#  For PyCharm Community Edition, use 'PyCharm CE' section in JetBrains.gitignore
.idea/

# =======================
# Node.js & NPM
# =======================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# =======================
# TypeScript
# =======================
# Compiled JavaScript files (but keep source JS files in scripts/)
*.js.map

# Allow JavaScript files in scripts directory (these are source files)
!scripts/*.js

# Allow TypeScript definition files in source directories
!mcp-google-oauth/*.d.ts
!mcp-oauth-github/*.d.ts
!mcp-google-oauth/src/*.d.ts
!mcp-oauth-github/src/*.d.ts

# But ignore compiled .d.ts files in build/dist directories
build/*.d.ts
dist/*.d.ts
lib/*.d.ts

# Compiled JavaScript in TypeScript projects build output
mcp-google-oauth/dist/*.js
mcp-oauth-github/dist/*.js
mcp-google-oauth/build/*.js
mcp-oauth-github/build/*.js

# TypeScript build info
*.tsbuildinfo

# TypeScript cache
.tscache

# =======================
# Cloudflare Workers
# =======================
# Wrangler generated files
.wrangler/
wrangler.toml.bak

# Cloudflare Workers build artifacts
worker/
dist/
build/

# Miniflare
.mf/

# Cloudflare KV storage
kv-storage/

# Workers AI cache
.ai-cache/

# =======================
# Editor & IDE
# =======================
# Visual Studio Code
.vscode/
*.code-workspace

# JetBrains IDEs
.idea/
*.iws
*.iml
*.ipr

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache
*.sublime-workspace
*.sublime-project

# Atom
.atom/

# =======================
# Operating System
# =======================
# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# Linux
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# =======================
# Development Tools
# =======================
# ESLint
.eslintcache

# Prettier
.prettierignore

# Stylelint
.stylelintcache

# Jest
coverage/

# Cypress
cypress/videos/
cypress/screenshots/

# Playwright
test-results/
playwright-report/
playwright/.cache/

# Storybook
storybook-static

# =======================
# Package Managers
# =======================
# PNPM
.pnpm-debug.log*
pnpm-lock.yaml

# Yarn
yarn-error.log
.yarn/
.yarnrc.yml

# UV (Python)
.uv-cache/

# =======================
# Databases
# =======================
*.sqlite
*.sqlite3
*.db

# =======================
# Logs & Temporary Files
# =======================
# Log files
*.log
logs/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# PID files
*.pid

# =======================
# Security & Secrets
# =======================
# Private keys
*.pem
*.key
*.p12
*.pfx

# Certificates
*.crt
*.cer

# SSH keys
id_rsa
id_dsa
id_ecdsa
id_ed25519

# =======================
# MCP Specific
# =======================
# MCP server data
mcp-data/
mcp-cache/

# ngrok
ngrok
ngrok.exe

# Local configuration
local.json
config.local.json

# Test data
test-data/
mock-data/

# =======================
# Build & Deploy
# =======================
# Build outputs
build/
dist/
out/
target/

# Deploy artifacts
deploy/
deployment/

# Docker
Dockerfile.local
docker-compose.override.yml

# =======================
# Backup & Archive
# =======================
# Backup files
*.bak
*.backup
*.old
*.orig

# Archive files (unless specifically needed)
*.zip
*.tar
*.tar.gz
*.tgz
*.rar
*.7z
